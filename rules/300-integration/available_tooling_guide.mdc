---
description: 
globs: 
alwaysApply: true
---

# AI Agent Tooling Selection Guide

## 1. Purpose

To provide AI agents with concise, actionable guidance on selecting the most appropriate tools for common tasks, considering Cursor's native `default_api` tools, the `mcp_desktop_commander_*` suite, and other specialized Model Context Protocol (MCP) servers configured in this workspace. This guide prioritizes efficiency, capability, and adherence to workspace best practices like `@cursor-agent-integration.mdc`.

## 2. Core Principles

*   **Prefer Specialization**: When a specialized MCP tool (e.g., from `mcp_desktop_commander_*` for OS tasks, `mcp_context7` for library docs) offers richer features, better control, or potentially improved cost/performance profiles, it should be preferred over a generic `default_api` equivalent.
*   **Consider `default_api` Cost**: Be mindful of the (currently unconfirmed, as of 2025-05-13) information that `default_api` tools may no longer have extra costs. If true, `default_api` tools become strong contenders for tasks where their capabilities are equivalent to MCP alternatives. However, feature advantages in MCP tools often still warrant their use.
*   **Fall Back to `default_api`**: For general tasks where specialized MCP features are not crucial, or if a specific MCP is unavailable/unsuitable, `default_api` tools provide a robust baseline.
*   **Context is Key**: The choice may depend on the specifics of the task (e.g., surgical edit vs. full file rewrite, reading a few lines vs. an entire file with URL support).
*   **Consult Detailed Overview**: For in-depth comparisons, feature lists, and examples, refer to the `@Notepad:mcp_and_cursor_tooling_overview.notepad.md`.

## 3. Quick Decision Heuristics

| Task Category                     | Recommended Primary Tool/Family                                     | Key Considerations & Alternatives                                                                                                                               |
| :-------------------------------- | :------------------------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **File System Operations**        |                                                                     |                                                                                                                                                                 |
| Full File Write/Overwrite         | `mcp_desktop_commander_write_file`                                  | Use for creating new files or completely replacing content. `default_api.edit_file` for creating new files is also viable.                                        |
| Appending to File                 | `mcp_desktop_commander_write_file` (with `append` mode)             | `default_api.edit_file` can also append but might be less direct.                                                                                                 |
| Surgical File Edit                | `mcp_desktop_commander_edit_block`                                  | Designed for precise, small changes with diff feedback. `default_api.edit_file` for broader, context-aware edits. Use `@cursor-agent-integration.mdc` strategies. |
| Reading Full File (Local/URL)     | `mcp_desktop_commander_read_file`                                   | Supports URLs, images, pagination, configurable line limits. `default_api.read_file` (with `should_read_entire_file=True`) for basic full local file reads.    |
| Reading Specific File Lines       | `default_api.read_file`                                             | Optimized for partial reads. `mcp_desktop_commander_read_file` can do this with `offset`/`length` but `default_api` is simpler for this specific use.           |
| List Directory Contents           | `mcp_desktop_commander_list_directory`                              | Typically provides more detail. `default_api.list_dir` for basic listings.                                                                                      |
| Create Directory                  | `mcp_desktop_commander_create_directory`                            | Standard choice.                                                                                                                                                |
| Move/Rename File/Directory        | `mcp_desktop_commander_move_file`                                   | Standard choice.                                                                                                                                                |
| Get File Info/Metadata            | `mcp_desktop_commander_get_file_info`                               | Provides detailed metadata.                                                                                                                                     |
| Delete File                       | `default_api.delete_file`                                           | Standard choice. `mcp_desktop_commander` does not list a dedicated delete file tool.                                                                            |
| **Search Operations**             |                                                                     |                                                                                                                                                                 |
| Code/Text Pattern Search (Ripgrep)| `mcp_desktop_commander_search_code`                                 | Powerful regex/pattern search in files via ripgrep.                                                                                                             |
| Basic Keyword/Regex Search (Grep) | `default_api.grep_search`                                           | Simpler grep functionality.                                                                                                                                     |
| Fuzzy File Name Search            | `default_api.file_search` or `mcp_desktop_commander_search_files`   | Compare based on specific needs if differences arise; `default_api.file_search` is standard.                                                                      |
| Semantic Codebase Search          | `default_api.Codebase`                                              | For conceptual searches if codebase is indexed.                                                                                                                 |
| Web Search                        | `default_api.web_search` or `mcp_perplexity-ask_perplexity_research`/`_ask` | `default_api` for general web queries. `mcp_perplexity-ask` for deeper research or specific model-driven search.                                            |
| Web Content Fetch (Text from URL) | `mcp-server-fetch` (`fetch` tool)                                   | Primary for fetching textual content from a known URL and converting HTML to Markdown. Supports chunking, `robots.txt` handling. `mcp_desktop_commander_read_file` for general URL (including images) or raw content. |
| **Execution & Process Management**|                                                                     |                                                                                                                                                                 |
| Terminal Command Execution        | `mcp_desktop_commander_execute_command`                             | Robust with timeout, shell selection, session mgt (`read_output`, `force_terminate`). `default_api.run_terminal_cmd` for simpler, direct commands.             |
| List/Kill Processes               | `mcp_desktop_commander_list_processes`, `kill_process`              | Dedicated tools for process management.                                                                                                                         |
| **Data & API Interactions**       |                                                                     |                                                                                                                                                                 |
| Vector DB Operations (Chroma)     | `mcp_chroma_*` tools                                                | For all interactions with the Chroma DB (add, query, delete, manage collections).                                                                               |
| Database Queries (Redshift)       | `mcp_redshift_mcp_execute_sql`, `_execute_sql_to_file`              | Specific tools for Redshift.                                                                                                                                    |
| Get Current Time / Convert Time   | `mcp_time_*` tools                                                  | For time-related operations.                                                                                                                                    |
| Get Live Library Docs             | `mcp_context7` (`get-library-docs`)                                 | When needing up-to-date documentation for software libraries during code generation/analysis.                                                                 |
| Specialized APIs                  | `mcp_github_*`, `mcp_slack_*`, `mcp_notionApi_*`, `mcp_dbt_*` tools | Use the relevant MCP server for interactions with GitHub, Slack, Notion, dbt respectively.                                                                      |
| **Agent & Context Management**    |                                                                     |                                                                                                                                                                 |
| Memory Operations                 | `mcp_memory_*` tools                                                | For creating/reading/updating/deleting entities and observations in agent memory.                                                                             |
| Structured Reasoning              | `mcp_sequential_thinking_sequentialthinking`                        | For breaking down complex tasks and managing multi-step thought processes.                                                                                      |
| Fetching Workspace Rules          | `default_api.fetch_rules`                                           | For retrieving `.mdc` rule definitions.                                                                                                                         |

## 4. Important Considerations

*   **Absolute Paths**: For `mcp_desktop_commander_*` file system tools, always use absolute paths when creating new files/directories or when the context is uncertain, as per `@stepwise-autonomy.mdc` and `@cursor-agent-integration.mdc`.
*   **Error Handling**: Follow error handling and verification steps outlined in `@stepwise-autonomy.mdc`.
*   **Tool Limits**: Be aware of `default_api` tool call limits (25 per session, extendable) if applicable.

## 5. Further Details

For a comprehensive comparison, including specific tool parameters, detailed use cases, and examples, consult the knowledge artifact: **`@Notepad:mcp_and_cursor_tooling_overview.notepad.md`**.
