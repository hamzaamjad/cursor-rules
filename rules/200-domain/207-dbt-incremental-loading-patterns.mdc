# dbt-incremental-loading-patterns

*Purpose*: Ensure reliable and performant incremental loads in dbt models.

## 1. Multi-Timestamp Tracking
- Track all relevant timestamps (e.g., `created_at`, `updated_at`, related entities) to avoid missed updates.
- Example filter:
  ```sql
  WHERE
    orders.created_at > (SELECT MAX(created_at) FROM {{ this }})
    OR orders.updated_at > (SELECT MAX(updated_at) FROM {{ this }})
  ```

## 2. Time-Window Backfill
- Support variable backfill windows via `vars`, e.g. `backfill_days`.
- Use conditional logic to backfill a recent window without full refresh.

## 3. Incremental Predicates
- Use `incremental_predicates` for database-driven merge conditions.

## 4. Conditional Full Refresh
- Toggle between `table` and `incremental` based on a `force_refresh` var.

## 5. Partitioned Incremental Models
- Combine clustering/partitioning with incremental filters for large tables (Snowflake/BigQuery).

## 6. Insert-Overwrite Strategy
- Use `insert_overwrite` for partition-level refreshes in supported warehouses.

## 7. Lookback Window
- Reprocess recent partitions via a configurable lookback window to catch late-arriving data.

*References*: knowledge_base/data_modeling/dbt/incremental_loading_patterns.md