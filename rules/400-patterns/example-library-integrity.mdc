---

dependencies:
  - 000-core/001-philosophers-stone.mdc

created: 2025-07-17
version: 1.0.0
---# example-library-integrity.mdc

**Version:** 1.0
**Date:** 2025-05-10
**Steward:** Nexus

## 1. Purpose

To ensure all examples within the Dynamic Example Injection Mechanism (DEIM) example library (`knowledge_base/prompts/meta_prompting_system/example_library/by_task_type/`) are high-quality, structurally complete, and have accurate metadata. This facilitates reliable example selection and injection by `v1_example_selector.py` and future selector versions.

## 2. Requirements

1.  **File Structure per Example:** Each example directory MUST contain the following files:
    *   `metadata.json`: Contains structured metadata about the example.
    *   `input.txt`: Contains the representative input content for the example (e.g., user query, data for LLM C).
    *   `output.txt`: Contains the representative successful output/response for the example.
    *   Optional: `description.md` (brief human-readable summary), `process_guidance.md` (notes on how the example achieves its goal).

2.  **`metadata.json` Structure & Content:**
    *   The `metadata.json` file MUST conform to the structure of `example_metadata` as implicitly defined for items in the `examples` array of `knowledge_base/prompts/meta_prompting_system/schemas/master_prompt_schema_v8.json`.
    *   Specifically, it must contain a top-level `id` (matching the directory name) and `type` (e.g., "positive").
    *   It MUST contain a nested object named `example_metadata`.
    *   The `example_metadata` object MUST accurately populate:
        *   `task_type_tags` (list of strings)
        *   `domain_tags` (list of strings)
        *   `complexity_level` (string, e.g., "simple", "moderate", "complex")
        *   Other fields like `difficulty`, `tests_concept`, `example_description`, `input_description`, `output_description`, `example_version`, `creation_date`, `last_updated_date`, `positive_keywords`, `negative_keywords` should be filled accurately.

3.  **Content Quality:**
    *   The content of `input.txt` and `output.txt` should be high-quality, clear, and accurately representative of the task/scenario the example is designed to illustrate.
    *   Placeholder content should be actively replaced with meaningful examples.
    *   **Content Quality**: `input.txt` and `output.txt` must contain high-quality, representative content. Placeholders are unacceptable for a finalized example. Consider different tiers of content completeness (e.g., "placeholder-free and syntactically valid" vs. "fully representative dialogue/trace demonstrating complex interactions"). Refer to `example_library_review_workflow.notepad.md` for detailed content quality guidelines.

4.  **Validation Process (Recommended during Curation/Audit - Task 3.3 & ongoing):**
    *   **Automated Checks (Scriptable):**
        *   Verify presence of `metadata.json`, `input.txt`, `output.txt` in each example directory.
        *   Validate `metadata.json` against a formal schema (if one is derived from `master_prompt_schema_v8.json`).
        *   Check for basic completeness of key fields within `example_metadata` (`task_type_tags`, `domain_tags`, `complexity_level`).
    *   **Manual Review (Peer or Self):**
        *   Review accuracy and appropriateness of `task_type_tags`, `domain_tags`, `complexity_level`.
        *   Assess quality and representativeness of `input.txt` and `output.txt` content.
        *   Refer to `@example_library_review_workflow.notepad.md` for detailed review process.

## 3. Rationale

Findings from DEIM V1 testing (see `deim_test_report_v1.md`) highlighted that missing files (especially `input.txt`), inconsistent metadata structures, and inaccurate metadata tags were primary causes for example selection failures or suboptimal selections. This rule aims to prevent such issues systematically.

## 4. Scope of Application

This rule applies to all current and future examples within the `knowledge_base/prompts/meta_prompting_system/example_library/by_task_type/` directory and its subdirectories.

## 5. Examples of Non-Compliance & Corrections

*   **Non-Compliance:** An example directory `cg_python_foo_001/` is missing `input.txt`.
    *   **Correction:** Create a representative `input.txt` for `cg_python_foo_001`.
*   **Non-Compliance:** `some_example/metadata.json` has `complexity: "high"` instead of `complexity_level: "complex"` within a nested `example_metadata` object.
    *   **Correction:** Update the key to `complexity_level` and ensure the value is one of the standard enums (simple, moderate, complex).
*   **Non-Compliance:** `another_example/metadata.json` has all tags and complexity at the top level, not within a nested `example_metadata` object.
    *   **Correction:** Restructure the JSON to include the `example_metadata: { ... }` nesting for these fields.