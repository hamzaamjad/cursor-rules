---
description: "80/20 framework for data analytics task prioritization"
version: 2.0.0
performance:
  token_budget: 600
  validation_target: 2ms
---

# 80-20 Data Analytics Prioritization

**Purpose**: Focus on 20% of analytics tasks delivering 80% of value.

## ROI Scoring Framework

```python
def calculate_roi(task):
    # Score each 1-5
    metrics = {
        'revenue_impact': task.revenue_delta,      # Direct revenue effect
        'process_efficiency': task.hours_saved,    # Hours × users × cost
        'data_quality': task.error_reduction,      # Error % × business impact
        'scalability': task.growth_headroom        # Capacity for growth
    }
    
    # Weighted impact score
    impact = (
        metrics['revenue_impact'] * 0.4 +
        metrics['process_efficiency'] * 0.3 +
        metrics['data_quality'] * 0.2 +
        metrics['scalability'] * 0.1
    )
    
    # ROI = Impact / Effort
    return impact / task.effort_score
```

## Decision Matrix

| Impact/Effort | Low Effort (1-2) | High Effort (3-5) |
|---------------|------------------|-------------------|
| **High Impact (4-5)** | 🎯 DO FIRST | 📅 PLAN CAREFULLY |
| **Low Impact (1-3)** | ⚡ QUICK WINS | ❌ AVOID |

## Scoring Guide

### Impact Metrics (1-5)
```yaml
Revenue Impact:
  5: >$1M or >5% revenue
  4: $500K-1M or 2-5% 
  3: $100-500K or 1-2%
  2: $10-100K or <1%
  1: <$10K or indirect

Process Efficiency:
  5: >2000 hours/year saved
  4: 500-2000 hours/year
  3: 100-500 hours/year
  2: 20-100 hours/year
  1: <20 hours/year
```

### Effort Scale
- **1**: Hours (trivial)
- **2**: Days (simple)
- **3**: Weeks (moderate)
- **4**: Months (complex)
- **5**: Quarters (major)

## Application Examples

### Churn Model
```python
task = {
    'revenue_impact': 5,      # $1.2M ARR recovery
    'process_efficiency': 3,  # 200 hours/year saved
    'data_quality': 4,        # 8% error reduction
    'scalability': 3,         # Handles 2x growth
    'effort_score': 3         # 3 weeks development
}
# ROI = 4.3 / 3 = 1.43 → HIGH PRIORITY
```

### Report Formatting
```python
task = {
    'revenue_impact': 1,      # No direct impact
    'process_efficiency': 1,  # 10 hours/year
    'data_quality': 1,        # Cosmetic only
    'scalability': 1,         # Not relevant
    'effort_score': 2         # 2 days work
}
# ROI = 1.0 / 2 = 0.5 → LOW PRIORITY
```

## Research Depth Calibration

| Expected Impact | Research Investment |
|----------------|-------------------|
| 5 (Transform) | Deep: Multiple sources, experts |
| 4 (Significant) | Thorough: 3+ quality sources |
| 3 (Moderate) | Focused: 2-3 sources |
| 2 (Minor) | Quick: 1 authoritative source |
| 1 (Minimal) | Skip or brief check |

## Quick Validation
- [ ] All tasks scored on 4 metrics
- [ ] Effort includes full implementation
- [ ] ROI calculated transparently
- [ ] Tasks placed in correct quadrant