---
description: Deployment & config best practices
globs: Dockerfile,docker-compose.yml,*.tf,**/k8s/*.yaml,deploy*.sh
alwaysApply: false
---
# deployment-config.mdc

*   **Purpose**: To establish best practices for application deployment, configuration management, and containerization, ensuring consistency, security, and reliability.
*   **Requirements**:
    1.  **Configuration Externalization**: All environment-specific configurations (database URLs, API keys, feature flags, ports, external service endpoints) MUST be externalized via environment variables or dedicated config files (e.g., `.env`, `.yaml`, `.toml`). Do NOT hardcode these values in source code. Use established libraries (e.g., `dotenv`, `viper`, `pydantic-settings`) for loading configuration.
    2.  **Dockerfile Best Practices**:
        *   Use minimal, official base images (e.g., `alpine`, `slim`, `distroless`).
        *   Use multi-stage builds to reduce final image size.
        *   Run containers as a non-root user (`USER` instruction).
        *   Optimize layer caching (order instructions from least to most frequently changing). Copy only necessary files (`COPY . .` is often inefficient).
        *   Specify image metadata (`LABEL`).
    3.  **Network Keep-Alives**: Ensure applications using long-lived network connections (e.g., Server-Sent Events, WebSockets, long polling) implement application-level keep-alives or heartbeats to prevent premature closure by load balancers or proxies.
    4.  **Deployment Documentation**: Include a `README.md` section detailing steps for building, configuring, deploying, and verifying the application (e.g., necessary environment variables, health check endpoint URL).
    5.  **Zero-Downtime & Rollback**: Plan deployments using strategies that minimize or eliminate downtime (e.g., blue/green, canary). Ensure a clear rollback procedure exists and is documented. Use version pinning for critical dependencies.
    6.  **Health Checks**: Expose a dedicated health check endpoint (e.g., `/healthz`, `/status`) that verifies the application's ability to serve traffic (e.g., connectivity to database, essential services).
*   **Validation**:
    *   Check (Code Review): Inspect code for hardcoded configuration values. Review Dockerfiles against best practices checklist. Review `README.md` for deployment instructions. Review deployment scripts/configs for ZDT/rollback strategy.
    *   Check (Static Analysis): Use linters like `hadolint` to check Dockerfiles. Scan code for hardcoded secrets/credentials.
    *   Check (Runtime): Verify health check endpoint functionality after deployment. Test rollback procedure in a staging environment. Check container runs as non-root user.
*   **Examples**:
    *   **Dockerfile (Multi-stage, Non-root)**:
        ```dockerfile
        # Build stage
        FROM python:3.10-slim as builder
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .

        # Final stage
        FROM python:3.10-slim
        WORKDIR /app
        COPY --from=builder /app /app
        # Create non-root user
        RUN useradd --create-home appuser
        USER appuser
        EXPOSE 8000
        CMD ["python", "main.py"]
        ```
    *   **Config Loading (Python/Pydantic)**:
        ```python
        from pydantic_settings import BaseSettings

        class Settings(BaseSettings):
            database_url: str
            api_key: str
            feature_flag_x: bool = False

            class Config:
                env_file = '.env' # Load from .env file

        settings = Settings()
        # Access config via settings.database_url, etc.
        ```
*   **Changes**: Updated to include recent best practices for deployment configurations, especially in cloud environments, such as using Infrastructure as Code (IaC) tools like Terraform for managing cloud resources and automating rollbacks on failed health checks.
*   **Source References**: `.cursor/rules/deployment-config.mdc`; [Docker Docs: Best practices for writing Dockerfiles](mdc:https:/docs.docker.com/develop/develop-images/dockerfile_best-practices); [Hadolint GitHub](mdc:https:/github.com/hadolint/hadolint); Pydantic-Settings docs.

*Purpose*: Secure, repeatable deployment configuration.

- Separate environments (dev/staging/prod) with isolated configs.
- Store secrets in Vault or env vars; never commit credentials.
- Use versioned infrastructure-as-code (Terraform/CloudFormation).
- Automate rollbacks on failed health checks.
