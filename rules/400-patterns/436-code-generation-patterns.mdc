---
description: "Prevent AI code generation errors"
version: 3.0.0
performance:
  avg_tokens: 600
  p95_latency: 1.5ms
  token_budget: 700
dependencies:
  - 000-core/001-philosophers-stone.mdc

created: 2025-07-17
---

# Code Generation Patterns

**Purpose**: Ensure professional-grade AI-generated code without common formatting errors.

## Critical Patterns

### Formatting Rules
```python
# ✅ CORRECT Structure
def process():
    """Process data."""
    return data

# ❌ AVOID: Same-line docstrings
def bad(): """Wrong""" return None
```

### Import Organization
```python
# Standard → Third-party → Local
import os
import json

import numpy as np
import pandas as pd

from .utils import helper
from .models import DataModel
```

### Error Handling
```python
# Always include proper error handling
try:
    result = risky_operation()
except SpecificError as e:
    logger.error(f"Operation failed: {e}")
    raise ProcessingError(f"Cannot process: {e}") from e
```

### Type Safety
```python
from typing import List, Dict, Optional

def process_items(items: List[Dict[str, Any]]) -> Optional[pd.DataFrame]:
    """Process with full type hints."""
    if not items:
        return None
    return pd.DataFrame(items)
```

## Common Pitfalls

1. **Missing newlines** after docstrings/comments
2. **Incomplete imports** - always specify full paths
3. **Bare exceptions** - catch specific errors
4. **No type hints** - add for public APIs
5. **Magic numbers** - use named constants

## Validation Checklist
- [ ] Proper indentation (4 spaces)
- [ ] Docstrings for public functions
- [ ] Error handling for I/O operations
- [ ] Type hints for parameters/returns
- [ ] No trailing whitespace
- [ ] Consistent quote style

## Quick Fixes
```bash
# Auto-format Python
black --line-length 88 *.py

# Type checking
mypy --strict *.py

# Linting
ruff check --fix *.py
```
