---
description: "Prevent AI-specific code formatting errors and generation pitfalls"
version: 2.0.0
performance:
  improvement_metric: 17.9%
  token_budget: 700
  validation_target: 2ms
---

# Code Generation Patterns

**Purpose**: Prevent formatting errors and ensure professional-grade AI-generated code.

## Critical Anti-Patterns

### Common Failures
```python
# ❌ WRONG: Code on same line as docstring
def process(): """Process data""" return data

# ✅ CORRECT: Proper separation
def process():
    """Process data"""
    return data
```

### Prevention Checklist
- Newline after docstrings/comments
- Blank lines between functions/classes
- Consistent indentation after multiline strings
- Complete logical units in each write

## Generation Strategy

### Chain of Code Method
1. **Structure** → Define skeleton
2. **Logic** → Add core functionality
3. **Tests** → Verify each function
4. **Optimize** → Refine implementation

### File Operations
```python
# Small files (<100 lines): Complete rewrite
with open('module.py', 'w') as f:
    f.write(complete_content)

# Large files: Chunked approach
# Never split functions/classes across chunks
chunks = split_by_logical_units(content, max_lines=50)
for chunk in chunks:
    append_with_validation(chunk)
```

## Multi-File Coordination

### Generation Order
1. `__init__.py` → Package structure
2. Base classes → Foundation types
3. Implementations → Core logic
4. Tests → Validation suite

### Cross-File Consistency
- Shared naming: `user_service`, `UserService`, `test_user_service`
- Import tracking: Verify all imports resolve
- Dependency order: Base before derived

## Validation Framework

### Required Checks
```bash
# Syntax validation
python -m py_compile generated.py

# Import verification
python -c "import generated"

# Format compliance
black --check generated.py

# Type checking
mypy generated.py
```

### Quality Gates
- ✓ All functions complete
- ✓ Proper spacing/indentation
- ✓ Imports resolve
- ✓ Tests pass
- ✓ Docstrings present

## Recovery Patterns

### Error Correction
```python
# AST-based formatting fix
import ast, black

# Parse and reformat
tree = ast.parse(problematic_code)
fixed = black.format_str(ast.unparse(tree), mode=black.Mode())
```

External: `@notepads/400-patterns/code-gen-templates.md`