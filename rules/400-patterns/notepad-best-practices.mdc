---

dependencies:
  - 000-core/001-philosophers-stone.mdc

created: 2025-07-17
version: 1.0.0
---# notepad-best-practices.mdc

*   **Purpose**: To define standards for creating and using Cursor Notepads (`.cursor/notepads/*.md` or other formats) for storing reusable templates, parameters, research notes, or dynamic content referenced in prompts or rules.
*   **Requirements**:
    1.  **Structure & Format**:
        *   Use Markdown (`.md`) as the default format unless another format is explicitly justified (e.g., `.json` for structured parameters).
        *   Organize content logically using Markdown headers, lists, and code blocks.
        *   Keep individual notepads focused on a specific topic, template, or set of parameters.
    2.  **Content**:
        *   Clearly state the purpose and intended usage of the notepad at the beginning.
        *   Use placeholders (e.g., `{VARIABLE_NAME}`) consistently for dynamic content or parameters that need to be filled in.
        *   Include examples of how to use the notepad content, especially for templates.
        *   Avoid embedding sensitive information directly; reference secure retrieval methods if needed.
    3.  **Naming & Referencing**:
        *   Use descriptive, kebab-case filenames (e.g., `data-api-request-template.md`).
        *   Reference notepads explicitly in rules or prompts using their path (e.g., `@Notepad:.cursor/notepads/my-template.md`).
    4.  **Maintenance**:
        *   Review and update notepads periodically to ensure content remains relevant and accurate.
        *   Use version control (Git) to track changes.
*   **Validation**:
    *   Check: Does the notepad have a clear purpose statement?
    *   Check: Is the content well-structured and easy to understand?
    *   Check: Are placeholders used consistently for dynamic parts?
    *   Check: Is the filename descriptive?
    *   Check: Is sensitive information avoided?
*   **Examples**:
    *   **Filename**: `api-error-handling-patterns.md`
    *   **Content Snippet (`api-error-handling-patterns.md`)**:
        ```markdown
        # API Error Handling Patterns

        Purpose: Provides standard patterns for handling errors in API responses.

        ## Pattern 1: Generic 500 Error

        Use this for unexpected server errors. Log details internally.

        ```json
        {
          "error": {
            "code": "INTERNAL_SERVER_ERROR",
            "message": "An unexpected error occurred. Please try again later.",
            "details": null
          }
        }
        ```

        ## Pattern 2: Validation Error (400)

        Use this for client-side input validation failures.

        ```json
        {
          "error": {
            "code": "VALIDATION_FAILED",
            "message": "Input validation failed.",
            "details": [
              { "field": "{fieldName}", "issue": "{validationIssue}" }
              // Add more details as needed
            ]
          }
        }
        ```
        ```
    *   **Referencing in a Rule**:
        ```markdown
        # in api-design-guidelines.mdc
        *   Requirement: API error responses MUST conform to the structures defined in `@Notepad:.cursor/notepads/api-error-handling-patterns.md`.
        ```
*   **Changes**: Initial version based on research findings regarding Notepad usage.
*   **Source References**: `.cursor/rules/notepad-best-practices.mdc`; Research ([10], [13]); `prompt-eval.mdc`.