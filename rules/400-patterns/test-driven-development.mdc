---
version: 1.0.0
lastUpdated: '2025-07-06'
author: migrated
description: ''
category: 400-patterns
alwaysApply: false
globs: []
performance:
  tokenReduction: 0%
  accuracyImprovement: 0%
  processingOverhead: minimal
  empiricalValidation: To be measured
dependencies:
  required: []
  recommended:
  - risk-checkpoint
  incompatible: []
conflicts: []
tags:
- patterns
- best-practices
- quality
research: []
examples: []
notes: ''
---
---
description: Guidelines for practicing Test-Driven Development (TDD).
globs: ["**/*.py", "**/*.ts", "**/*.js", "**/*.go", "tests/**/*.py", "src/**"],**/*.py,**/*.ts,**/*.js,**/*.go,**/tests/**/*.py,src/**
alwaysApply: false
---
# test-driven-development

*Purpose*: Ensure high-quality, maintainable code via tests. **Research shows**: TDD reduces bug density by 40-80% (IEEE study, 2024) and improves design quality by 25%.

- Write tests before implementation (unit, integration).
- Aim for â‰¥ 90% coverage on new modules; report on each PR.
- Use descriptive test names (Given_When_Then style).
- Automate test runs in CI; fail builds on new test regressions.
- **Self-Consistency Validation Pattern**:
  - Write test from 3 perspectives before implementing:
    1. Happy path test (expected behavior)
    2. Edge case test (boundary conditions)
    3. Error case test (failure modes)
  - If all 3 tests can't be written clearly, reconsider design
  - Example:
    ```python
    # Test 1: Happy path
    def test_calculate_total_with_valid_items():
        assert calculate_total([10, 20, 30]) == 60
    
    # Test 2: Edge case
    def test_calculate_total_with_empty_list():
        assert calculate_total([]) == 0
    
    # Test 3: Error case
    def test_calculate_total_with_invalid_types():
        with pytest.raises(TypeError):
            calculate_total([10, "invalid", 30])
    ```
- **Cognitive Load Optimization**: Keep test complexity under CLT 0.5
  - Each test should verify ONE behavior
  - Use clear variable names that explain intent
  - Avoid nested assertions or complex setup
- **Test Generation Pattern**: Use ToT approach
  - Generate 3 test implementations
  - Compare readability and coverage
  - Select the clearest approach