---
description: Prevent common formatting errors in AI-generated Python code and establish best practices for multi-file code generation tasks.
globs: 
alwaysApply: false
---
# Code Generation Patterns

* **Purpose**: Prevent common formatting errors in AI-generated Python code and establish best practices for multi-file code generation tasks.
* **Scope**: Applies to all Python code generation, particularly when using file manipulation tools in multi-agent or automated contexts.

## Anti-patterns to Avoid

### 1. Docstring/Comment Line Continuation
**Problem**: Code appearing on the same line as docstrings or comments
```python
# BAD
def function():
    """Docstring."""    code_here()
    
# BAD
# Comment    code_here()
```

**Solution**: Always place code on a new line after docstrings/comments
```python
# GOOD
def function():
    """Docstring."""
    code_here()
    
# GOOD
# Comment
code_here()
```

### 2. Missing Newlines Between Logical Blocks
**Problem**: No separation between functions, classes, or logical sections
```python
# BAD
def func1():
    pass
def func2():
    pass
```

**Solution**: Use appropriate newlines (2 for top-level, 1 for methods)
```python
# GOOD
def func1():
    pass


def func2():
    pass
```

### 3. Incorrect Indentation After Multiline Strings
**Problem**: Wrong indentation level after triple-quoted strings
```python
# BAD
"""Module docstring."""
    import os  # Wrong indentation
```

**Solution**: Maintain correct module-level indentation
```python
# GOOD
"""Module docstring."""

import os  # Correct indentation
```

## Best Practices

### File Writing Strategy
1. **Small Files (< 50 lines)**: Use `rewrite` mode for clarity
2. **Large Files (> 50 lines)**: Use chunked approach with complete logical units
3. **Append Operations**: Always include blank line before new content

### Validation Steps
1. **Syntax Check**: Run `python -m py_compile <file>` after generation
2. **Import Test**: Verify modules can be imported without errors
3. **Format Check**: Use `black --check <file>` for consistent formatting

### Multi-File Generation
1. **Order Matters**: Create `__init__.py` files before module files
2. **Dependencies First**: Generate base classes before derived classes
3. **Test Early**: Create minimal test file to verify imports work

## Tool-Specific Guidelines

### Using `edit_file` / `write_file`
```python
# When appending, always include separator
content = """
def new_function():
    pass
"""  # Note the leading newline
```

### Using `append` mode
- Include complete functions/classes per append
- Never split logical units across multiple appends
- Add trailing newline to prevent concatenation issues

## Validation Checklist
- [ ] All functions/classes are complete in single chunks
- [ ] Proper newlines between logical blocks
- [ ] No code on same line as comments/docstrings
- [ ] Files pass `python -m py_compile` check
- [ ] Imports work correctly
- [ ] Consistent indentation throughout

## Common Patterns

### Module Structure Template
```python
"""Module docstring."""

# Standard library imports
import os
import sys

# Third-party imports
import requests

# Local imports
from .base import BaseClass


class MyClass(BaseClass):
    """Class docstring."""
    
    def __init__(self):
        """Initialize."""
        super().__init__()


def main():
    """Entry point."""
    pass


if __name__ == "__main__":
    main()
```

## Recovery Strategies

### When Formatting Errors Occur
1. **Identify Pattern**: Look for common issues (same-line code, missing newlines)
2. **Targeted Fix**: Use `search_replace` for specific corrections
3. **Avoid Over-correction**: Don't use broad regex that affects valid code
4. **Validate After Fix**: Always re-check syntax after corrections

### Automated Fixing
- Use AST-based tools when possible (e.g., `autopep8`, `black`)
- Test fixes on single file before bulk application
- Keep backups before large-scale modifications

* **Version**: 1.0.0
* **Created**: 2024-06-17
* **Source**: Lessons learned from Mirror MVP implementation task
