---

dependencies:
  - 000-core/001-philosophers-stone.mdc

created: 2025-07-17
version: 1.0.0
---*   **Purpose**: To establish standards for application logging and basic monitoring, enabling effective debugging, performance analysis, and operational awareness (observability).
*   **Requirements**:
    1.  **Structured Logging**: Use structured logging formats (preferably JSON) for all application logs.
    2.  **Log Levels**: Use appropriate log levels consistently:
        *   `ERROR`: For critical errors preventing normal operation (requires investigation).
        *   `WARN`: For potential issues or non-critical errors that don't stop operation but should be noted.
        *   `INFO`: For significant application lifecycle events (e.g., service start/stop, request handling, major task completion).
        *   `DEBUG`: For detailed diagnostic information useful during development/troubleshooting (should be disabled in production by default).
    3.  **Contextual Information**: Include relevant context in logs: Timestamp (UTC), log level, service name, correlation ID (`traceId`, `requestId`), authenticated User ID (if applicable), specific function/module name.
    4.  **PII & Secrets**: NEVER log sensitive data (passwords, API keys, tokens, PII like full names, emails, SSNs) in plain text. Use masking, redaction, or tokenization techniques. Validate scrubbing effectiveness.
    5.  **Background Processes**: Ensure logs from background tasks, cron jobs, or daemons are captured and accessible (e.g., written to stdout/stderr for container orchestration capture, or dedicated log files).
    6.  **Health Checks**: Implement a health check endpoint (e.g., `/healthz`) that verifies core functionality (e.g., DB connectivity, key service availability).
    7.  **Key Metrics**: Expose key performance indicators (KPIs) for monitoring via a metrics endpoint (e.g., `/metrics` in Prometheus format) or monitoring agent. Essential metrics include: Request latency (average, p95, p99), Request throughput (RPS), Error rates (per endpoint/status code).
*   **Validation**:
    *   Check (Code Review): Inspect log statements for structure, level usage, context fields, and potential PII leakage. Review masking/scrubbing logic. Verify health check logic. Check metric exposure points.
    *   Check (Testing): Write tests to ensure PII is correctly masked in logs under various conditions. Test the health check endpoint.
    *   Check (Runtime): Inspect logs in staging/production for correct JSON format and presence of required fields. Verify metrics are available in the monitoring system (e.g., Prometheus, Datadog). Ensure DEBUG logs are off in production.
*   **Examples**:
    *   **Structured Log (JSON Example)**:
        ```json
        {
          "timestamp": "2024-03-27T10:30:01.123Z",
          "level": "INFO",
          "service": "order-processor",
          "message": "Order processed successfully",
          "traceId": "abc-123-xyz-789",
          "userId": "user-456",
          "orderId": "ord-789",
          "processingTimeMs": 150
        }
        ```
    *   **PII Masking (Conceptual)**:
        ```python
        # Assume 'payload' dict might contain sensitive info
        def scrub_payload(payload):
            scrubbed = payload.copy()
            if 'password' in scrubbed:
                scrubbed['password'] = '*** MASKED ***'
            if 'email' in scrubbed:
                # Simple masking, better techniques exist
                parts = scrubbed['email'].split('@')
                if len(parts) == 2:
                    scrubbed['email'] = parts[0][0] + '***@' + parts[1]
            return scrubbed

        logger.info("Received user data: %s", json.dumps(scrub_payload(data)))
        ```
*   **Changes**: Updated to include recent tools and techniques for effective logging and monitoring, especially in distributed systems, such as OpenTelemetry integration and advanced PII masking techniques.
*   **Source References**: `.cursor/rules/logging-monitoring.mdc`; OpenTelemetry Logging standards; General observability best practices.

```markdown
- Use structured logging (e.g., JSON) at appropriate levels (INFO, WARN, ERROR, DEBUG).
- Include trace/request IDs for cross-system correlation.
- Never log PII or secretsâ€”mask sensitive fields.
- Ensure background/daemon processes log output to accessible files.
- Monitor process health (e.g., PID existence, basic resource usage) for critical services.
- Expose key performance metrics (latency, throughput, error rates) via endpoints or agents.
```