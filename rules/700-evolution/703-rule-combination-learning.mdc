---
description: "Rule combination through genetic algorithms"
version: 1.0.0
author: "Evolution Team"
created: "2025-01-07"
last_modified: "2025-01-07"
last_reviewed: "2025-01-07"

dependencies:
  - "700-evolution/702-self-modifying-rules.mdc"
  - "100-cognitive/103-divergence-convergence.mdc"

performance:
  avg_tokens: 850
  p95_latency: 70
  success_rate: 86.4
  token_budget: 1100

tags:
  - "evolution"
  - "genetic-algorithm"
  - "rule-combination"
  - "crossover"
---

# Evolution: Rule Combination Learning

* **Purpose**: Discover optimal rule combinations through genetic crossover and selection

* **Requirements**:
  * **Genetic Operations**:
    - Crossover: Single-point, two-point, uniform
    - Mutation: Rule addition/removal/swap
    - Selection: Tournament (size=3)
  * **Chromosome Encoding**:
    - Gene: Rule ID + weight + activation order
    - Length: 3-8 rules per combination
    - Constraints: Respect dependencies
  * **Population Dynamics**:
    - Population: 20 individuals
    - Generations: 50 max
    - Elite preservation: Top 10%

* **Validation**:
  * Check: No circular dependencies in offspring
  * Check: Fitness improvement over baseline
  * Check: Diversity maintained (>0.4)
  * Metric: Best combination outperforms: +28%
  * Metric: Convergence time: <30 generations

* **Examples**:
  <example_correct>
  Parent1: [philosophers-stone, divergence, pareto]
  Parent2: [metacognition, hypothesis, convergence]
  Offspring: [philosophers-stone, hypothesis, convergence]
  Fitness: 0.92 (better than both parents)
  </example_correct>

* **Genetic Encoding**:
  ```python
  class RuleGenome:
      def __init__(self):
          self.genes = []  # [(rule_id, weight, order)]
          
      def crossover(self, other: 'RuleGenome') -> 'RuleGenome':
          point = random.randint(1, len(self.genes)-1)
          child = RuleGenome()
          child.genes = self.genes[:point] + other.genes[point:]
          return child
          
      def mutate(self, rate: float = 0.1):
          if random.random() < rate:
              op = random.choice(['add', 'remove', 'swap'])
              if op == 'add':
                  self.genes.append(random_rule())
              elif op == 'remove' and len(self.genes) > 3:
                  self.genes.pop(random.randint(0, len(self.genes)-1))
              elif op == 'swap' and len(self.genes) > 1:
                  i, j = random.sample(range(len(self.genes)), 2)
                  self.genes[i], self.genes[j] = self.genes[j], self.genes[i]
  ```

* **Evolution Results**:
  - Top combination: [stone, diverge, hypothesis, validate]
  - Performance gain: +32% vs individual rules
  - Emergent pattern: Cognitive rules pair well with validation