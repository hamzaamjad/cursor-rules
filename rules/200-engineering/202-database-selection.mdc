---

dependencies:
  - 000-core/001-philosophers-stone.mdc
  - 100-cognitive/102-wildcard-brainstorm.mdc

created: 2025-07-17
version: 1.0.0
---# Database Selection Checklist

* **Purpose**: To ensure appropriate database technology selection based on access patterns, concurrency requirements, and existing infrastructure. **Research shows**: Wrong database selection causes 60% of performance issues and 40% of scaling failures.

* **Requirements**: When proposing or implementing database solutions, evaluate against these criteria:

## Tree of Thoughts Database Evaluation
Generate and compare 3 database options using quantitative scoring:
```
Score = (Performance × 0.3) + (Scalability × 0.3) + (Operational × 0.2) + (Cost × 0.2)
```

## Concurrency Evaluation
- [ ] **Write Concurrency**: Will multiple agents/services write simultaneously?
  - Score: 0-10 based on expected concurrent writers
  - PostgreSQL: 10 (excellent), DuckDB: 1 (single-writer only)
- [ ] **Read Concurrency**: Will multiple agents/services read simultaneously?
  - Score: 0-10 based on expected concurrent readers
- [ ] **Connection Limits**: What are the connection pool requirements?
  - Quantify: connections_needed / max_connections
- [ ] **Transaction Isolation**: What level of ACID compliance is needed?
  - Strict ACID: +3 points for PostgreSQL
  - Eventual consistency OK: +3 points for NoSQL options

## Performance Requirements
- [ ] **Write Performance**: Expected writes per second?
- [ ] **Read Performance**: Expected queries per second?
- [ ] **Data Volume**: Expected data size over 1 year?
- [ ] **Query Complexity**: Simple lookups vs complex analytics?

## Operational Considerations
- [ ] **Existing Infrastructure**: What databases are already deployed?
- [ ] **Migration Complexity**: How difficult to migrate from current state?
- [ ] **Operational Overhead**: Additional services to maintain?
- [ ] **Backup/Recovery**: Built-in or requires additional tooling?

## Mirror-Specific Context
Current database infrastructure:
- **PostgreSQL + TimescaleDB**: Primary database for time-series data (handles concurrent writes)
- **DuckDB**: Analytics engine for read-only complex queries (single-writer limitation)
- **ChromaDB**: Vector database for semantic memory
- **Redis**: Cache and message broker

## Decision Framework
1. **Concurrent writes needed** → PostgreSQL/TimescaleDB
2. **Complex analytics only** → DuckDB (read-only mode)
3. **Semantic search** → ChromaDB
4. **Temporary data/cache** → Redis

## Anti-Patterns to Avoid
- ❌ Using DuckDB for concurrent writes
- ❌ Using PostgreSQL for heavy OLAP without proper indexing
- ❌ Introducing new databases without clear differentiation
- ❌ Ignoring existing infrastructure

* **Validation**:
  - Check: Has concurrency been explicitly evaluated?
  - Check: Is the choice compatible with existing infrastructure?
  - Check: Is there a migration path from current state?

* **Source References**: Session retrospective 2025-06-25, Mirror Phase 4 decisions