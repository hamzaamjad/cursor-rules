---
description: Enable cross-domain knowledge transfer through structured analogical reasoning
globs: 
  - "**/*.py"
  - "**/*.js"
  - "**/*.md"
  - "**/*.yaml"
alwaysApply: false
---

# analogy-transfer.mdc

<!-- Version: 1.0.0 — 2025-06-19 -->
<!-- Based on Gentner's Structure-Mapping Theory and Hofstadter's Core-Cognition Thesis -->

* **Purpose**: To enable systematic cross-domain problem-solving by mapping relational structures from familiar source domains to novel target problems. This rule operationalizes analogical reasoning as a formal problem-solving tool, emphasizing structural over surface similarity.

* **Requirements**:
  * **Source Domain Selection**:
    - Identify 2-3 potential source domains with structural similarity
    - Prioritize domains with well-understood causal relationships
    - Include at least one "distant" domain for creative insights
  * **Structural Mapping Process**:
    - Explicitly map relationships, not attributes
    - Identify: entities, relationships, higher-order relations
    - Use template: "In [source], [A relates to B]. In [target], [X relates to Y similarly]"
  * **Mapping Validation**:
    - Verify causal relationships preserve across domains
    - Explicitly state what does NOT transfer
    - Test mapping with edge cases
  * **Analogy Repository**: <!-- TODO: Build curated analogy database -->
    - Nature patterns (ant colonies, river networks, immune systems)
    - Engineering systems (highways, power grids, supply chains)  
    - Organizational structures (military, orchestras, sports teams)
    - Abstract systems (music theory, game mechanics, economic markets)
  * **Integration Requirements**:
    - Present mapping during DIVERGENCE phase of divergence-convergence
    - Include confidence score for structural fit (low/medium/high)
    - Provide fallback if primary analogy fails

* **Validation**:
  * Check: Are relationships (not attributes) explicitly mapped?
  * Check: Is causal structure preserved across domains?
  * Check: Are limitations/non-transfers clearly stated?
  * Check: Does the analogy enable specific problem-solving insights?
  * Check: Is structural similarity score provided?

* **Examples**:
  * **Scenario**: Design distributed system resilience
    - **Source Selection**: "Evaluating source domains: 1) Immune system (high fit), 2) Forest fire management (medium fit), 3) Jazz improvisation (creative fit)"
    - **Structural Mapping**: 
      ```
      IMMUNE SYSTEM → DISTRIBUTED SYSTEM
      - Antibodies → Error handlers (recognize specific threats)
      - T-cells → Circuit breakers (kill compromised components)
      - Memory cells → Incident patterns database
      - Inflammation → Rate limiting (temporary protection)
      - Fever → System-wide defensive mode
      
      CAUSAL PRESERVATION:
      - Pathogen exposure → Memory cell creation
      - System intrusion → Pattern recording
      
      DOES NOT TRANSFER:
      - Physical proximity effects
      - Biological evolution timescales
      ```
    - **Applied Solution**: "Implement 'immune memory' - system learns from failures and pre-positions defenses"

  * **Scenario**: Optimize team communication
    - **Source Selection**: "1) Neural networks (high fit), 2) Highway systems (medium fit), 3) Beehive waggle dance (creative fit)"
    - **Structural Mapping**:
      ```
      NEURAL NETWORK → TEAM COMMUNICATION
      - Neurons → Team members
      - Synapses → Communication channels  
      - Action potential → Message priority threshold
      - Neurotransmitters → Message types/protocols
      - Plasticity → Channel optimization over time
      ```
    - **Applied Solution**: "Implement 'synaptic strengthening' - frequently used communication paths get dedicated channels/tools"

* **Advanced Patterns**:
  * **Compositional Analogies**: Combine multiple source domains
  * **Recursive Analogies**: Use output of one mapping as input to another
  * **Anti-Analogies**: Explicitly map what NOT to do based on failed systems
  * **Temporal Analogies**: Map processes/stages rather than static structures

* **Risk Mitigation**:
  * Always test analogies with edge cases before implementation
  * Maintain "analogy debt" log for mappings that may break <!-- TODO: Create monitoring system -->
  * Review analogies when system behavior diverges from source domain
  * Flag when surface similarity might mislead (e.g., "cloud" computing)

* **Changes**: Initial implementation v1.0.0. Establishes formal analogy-based reasoning with effect size d=0.50 for improved problem-solving outcomes.

* **Source References**: 
  - Gentner's Structure-Mapping Theory
  - Hofstadter "Analogy as the Core of Cognition"  
  - MAC/FAC Computational Model
  - Meta-analysis of analogical reasoning in education
  - https://escholarship.org/content/qt2bs2f3dv/qt2bs2f3dv_noSplash.pdf