#!/bin/bash
# Quick Start Script for Rule Symbiosis Evolution Engine

echo "🧬 Rule Symbiosis Quick Start"
echo "============================"
echo ""

# Check if we're in the right directory
if [ ! -f "rule_symbiosis_engine.py" ]; then
    echo "❌ Error: Please run this script from the symbiosis-engine directory"
    exit 1
fi

# Create example cursor config with evolved profile
cat > example_cursor_config.yaml << 'EOF'
# Cursor Configuration with Evolved Rule Profile
# Generated by Rule Symbiosis Evolution Engine

# Choose your profile based on task type:
# - paradoxical_innovation: Creative tasks with safety requirements
# - efficient_explorer: Large-scale analysis with token limits  
# - rapid_prototyping: Fast iteration and MVPs
# - cross_domain_sage: Analogical reasoning tasks
# - analytical_depth: Deep research and analysis

profile: paradoxical_innovation

# The evolved rule combination
rules:
  - 105-context-trim       # Pre-process for efficiency
  - 004-risk-checkpoint    # Safety boundaries
  - 102-wildcard-brainstorm # Creative exploration
  - 103-divergence-convergence # Structured synthesis
  - 106-concise-comms     # Output optimization

# Optimal constraint levels discovered through evolution
constraints:
  temporal_pressure: 0.60  # 60% time constraint maximizes creativity
  safety_threshold: 0.60   # 60% safety enables practical innovation
  resource_limit: 0.60     # 60% resource limit forces elegance

# LLM parameters for this profile
llm_params:
  temperature: 0.9      # Higher for creative tasks
  top_p: 0.9           # Wider sampling
  frequency_penalty: 0.5 # Encourage novelty

# Expected performance metrics
expected_performance:
  token_efficiency: 0.89
  creativity_score: 0.82
  safety_score: 0.95
  execution_speed: 0.85

# Monitoring configuration
monitoring:
  enabled: true
  alert_if_below:
    creativity: 0.70
    safety: 0.85
    efficiency: 0.80
EOF

echo "✅ Created example_cursor_config.yaml"
echo ""

# Create quick profile selector
cat > select_profile.py << 'EOF'
#!/usr/bin/env python3
"""Quick profile selector based on task description"""

def select_profile(task_desc):
    task_lower = task_desc.lower()
    
    if any(word in task_lower for word in ['creative', 'design', 'innovative', 'novel']):
        if 'safe' in task_lower or 'complian' in task_lower:
            return 'paradoxical_innovation'
        return 'wildcard_explorer'
    
    elif any(word in task_lower for word in ['analyz', 'research', 'investigat']):
        if 'large' in task_lower or 'data' in task_lower:
            return 'efficient_explorer'
        return 'analytical_depth'
    
    elif any(word in task_lower for word in ['quick', 'fast', 'prototype', 'mvp']):
        return 'rapid_prototyping'
    
    elif any(word in task_lower for word in ['biomimetic', 'inspired', 'pattern']):
        return 'cross_domain_sage'
    
    else:
        return 'paradoxical_innovation'  # Default

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        task = ' '.join(sys.argv[1:])
        profile = select_profile(task)
        print(f"Recommended profile: {profile}")
    else:
        print("Usage: python3 select_profile.py <task description>")
EOF

chmod +x select_profile.py

echo "✅ Created profile selector script"
echo ""

# Show available profiles
echo "📋 Available Evolved Profiles:"
echo "------------------------------"
echo "1. paradoxical_innovation - Creative tasks with safety needs"
echo "2. efficient_explorer - Large data analysis with token limits"
echo "3. rapid_prototyping - Fast iteration and MVPs"
echo "4. cross_domain_sage - Cross-domain pattern transfer"
echo "5. analytical_depth - Deep research and investigation"
echo ""

# Show example usage
echo "🚀 Example Usage:"
echo "-----------------"
echo "# Select profile for your task:"
echo "python3 select_profile.py 'Design an innovative caching system'"
echo ""
echo "# Use with Cursor:"
echo "cursor --config example_cursor_config.yaml --task 'Your task here'"
echo ""
echo "# Run demonstration:"
echo "python3 demo_symbiosis.py"
echo ""

# Create a simple task runner
cat > run_with_profile.sh << 'EOF'
#!/bin/bash
# Run task with optimal profile

if [ $# -eq 0 ]; then
    echo "Usage: ./run_with_profile.sh '<task description>'"
    exit 1
fi

TASK="$1"
PROFILE=$(python3 select_profile.py "$TASK")

echo "🎯 Task: $TASK"
echo "📊 Selected Profile: $PROFILE"
echo "🚀 Executing with evolved rule combination..."
echo ""

# Here you would integrate with actual Cursor execution
# For now, we'll show what would happen
echo "Would execute: cursor --profile $PROFILE --task '$TASK'"
EOF

chmod +x run_with_profile.sh

echo "✅ Created task runner script"
echo ""
echo "✨ Quick Start Complete!"
echo ""
echo "Next steps:"
echo "1. Try the profile selector: python3 select_profile.py 'your task'"
echo "2. Run the demonstration: python3 demo_symbiosis.py"
echo "3. Use evolved config: cursor --config example_cursor_config.yaml"
echo "4. Explore the full documentation in README.md"
echo ""
echo "💡 Remember: Constraints at ~60% optimize both creativity AND practicality!"
