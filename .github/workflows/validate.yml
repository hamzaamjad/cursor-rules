name: Validate Rules

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog validation

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-benchmark mypy types-PyYAML

    - name: Run type checking
      run: mypy validation/ --ignore-missing-imports

    - name: Validate all rules
      run: |
        python validation/rule_validator.py --all --report-format json > validation_report.json
        # Exit with error if validation fails
        python -c "import json; report = json.load(open('validation_report.json')); exit(1 if not report.get('success', False) else 0)"

    - name: Check for circular dependencies
      run: python scripts/check_circular_deps.py

    - name: Performance check
      run: |
        python -c "
        from pathlib import Path
        import yaml
        
        rules_dir = Path('rules')
        oversized_rules = []
        
        for mdc_file in rules_dir.rglob('*.mdc'):
            lines = mdc_file.read_text().splitlines()
            if len(lines) > 150:
                oversized_rules.append((str(mdc_file), len(lines)))
        
        if oversized_rules:
            print('WARNING: Oversized rules detected:')
            for rule, lines in oversized_rules:
                print(f'  {rule}: {lines} lines')
        else:
            print('✓ All rules within size limits')
        "

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-report
        path: validation_report.json
        retention-days: 30

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('validation_report.json', 'utf8'));
          
          let comment = '## 📋 Rule Validation Report\n\n';
          
          if (report.success) {
            comment += '✅ **All validations passed!**\n\n';
          } else {
            comment += '❌ **Validation failed**\n\n';
          }
          
          // Add statistics
          comment += `### Statistics\n`;
          comment += `- Total rules: ${report.total_rules || 0}\n`;
          comment += `- Valid rules: ${report.valid_rules || 0}\n`;
          comment += `- Errors: ${report.error_count || 0}\n`;
          comment += `- Warnings: ${report.warning_count || 0}\n`;
          
          // Add errors if any
          if (report.errors && report.errors.length > 0) {
            comment += '\n### Errors\n';
            report.errors.forEach(error => {
              comment += `- \`${error.file}\`: ${error.message}\n`;
            });
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
